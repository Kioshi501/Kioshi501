# mybigmodule.py

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from userbot import loader, utils
from telethon import events
from telethon.tl.functions.contacts import BlockRequest, UnblockRequest
import asyncio
import random
import aiohttp
import datetime
import os
import platform

@loader.tds
class MyBigModule(loader.Module):
    """–ë–æ–ª—å—à–æ–π –º–æ–¥—É–ª—å –¥–ª—è Hikka Userbot —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π."""

    strings = {
        "name": "MyBigModule",
        "ping": "<b>üèì –ü–æ–Ω–≥!</b> <code>{} ms</code>",
        "echo_usage": "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.echo [—Ç–µ–∫—Å—Ç]</code>",
        "ban_success": "<b>üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}</b> <b>–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>",
        "unban_success": "<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}</b> <b>—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>",
        "kick_success": "<b>üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}</b> <b>–≤—ã–≥–Ω–∞–Ω –∏–∑ —á–∞—Ç–∞.</b>",
        "meme_loading": "<b>üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–º...</b>",
        "meme_error": "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º.</b>",
        "quote_loading": "<b>üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ü–∏—Ç–∞—Ç—É...</b>",
        "quote_error": "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.</b>",
        "translate_usage": "<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]</code>",
        "translate_error": "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.</b>",
        "currency_usage": "<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.currency [—Å—É–º–º–∞] [–∏–∑] [–≤]</code>",
        "currency_error": "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É.</b>",
        "info_user": (
            "<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            "‚Ä¢ <b>–ò–º—è:</b> {first} {last}\n"
            "‚Ä¢ <b>Username:</b> @{username}\n"
            "‚Ä¢ <b>ID:</b> <code>{id}</code>\n"
            "‚Ä¢ <b>Bio:</b> {bio}"
        ),
        "info_chat": (
            "<b>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
            "‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "‚Ä¢ <b>–¢–∏–ø:</b> {type}\n"
            "‚Ä¢ <b>ID:</b> <code>{id}</code>\n"
            "‚Ä¢ <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {members}"
        ),
        "sysinfo": (
            "<b>üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
            "‚Ä¢ <b>–°–∏—Å—Ç–µ–º–∞:</b> {system}\n"
            "‚Ä¢ <b>–ò–º—è —É–∑–ª–∞:</b> {node}\n"
            "‚Ä¢ <b>–í–µ—Ä—Å–∏—è:</b> {version}\n"
            "‚Ä¢ <b>–ú–∞—à–∏–Ω–∞:</b> {machine}\n"
            "‚Ä¢ <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {processor}\n"
        ),
        "download_success": "<b>üì¶ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.</b>",
        "download_error": "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.</b>",
        "help_text": (
            "<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è MyBigModule:</b>\n\n"
            "‚Ä¢ <b>.ping</b> - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞.\n"
            "‚Ä¢ <b>.echo [—Ç–µ–∫—Å—Ç]</b> - –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            "‚Ä¢ <b>.ban</b> - –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).\n"
            "‚Ä¢ <b>.unban [username –∏–ª–∏ ID]</b> - –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "‚Ä¢ <b>.kick</b> - –í—ã–≥–æ–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞ (–Ω—É–∂–µ–Ω —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).\n"
            "‚Ä¢ <b>.meme</b> - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º.\n"
            "‚Ä¢ <b>.quote</b> - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É.\n"
            "‚Ä¢ <b>.translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]</b> - –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫.\n"
            "‚Ä¢ <b>.currency [—Å—É–º–º–∞] [–∏–∑] [–≤]</b> - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É.\n"
            "‚Ä¢ <b>.info</b> - –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ.\n"
            "‚Ä¢ <b>.sysinfo</b> - –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ.\n"
            "‚Ä¢ <b>.download</b> - –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "‚Ä¢ <b>.helpme</b> - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        ),
    }

    @loader.command()
    async def ping(self, m):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞."""
        start = datetime.datetime.now()
        msg = await m.respond("<b>üèì –ü–∏–Ω–≥...</b>")
        end = datetime.datetime.now()
        delta = (end - start).microseconds / 1000
        await msg.edit(self.strings["ping"].format(delta))

    @loader.command()
    async def echo(self, m):
        """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        args = utils.get_args_raw(m)
        if not args:
            await m.edit(self.strings["echo_usage"])
            return
        await m.delete()
        await m.client.send_message(m.chat_id, args)

    @loader.command()
    async def ban(self, m):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        reply = await m.get_reply_message()
        if not reply:
            await m.edit("<b>‚ùå –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.</b>")
            return
        user = reply.sender
        if not user:
            await m.edit("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>")
            return
        try:
            await m.client(BlockRequest(user.id))
            await m.edit(self.strings["ban_success"].format(user.first_name))
        except Exception as e:
            await m.edit(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:</b> {e}")

    @loader.command()
    async def unban(self, m):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        args = utils.get_args_raw(m)
        if not args:
            await m.edit("<b>‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.</b>")
            return
        try:
            user = await m.client.get_entity(args)
            await m.client(UnblockRequest(user.id))
            await m.edit(self.strings["unban_success"].format(user.first_name))
        except Exception as e:
            await m.edit(f"<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")

    @loader.command()
    async def kick(self, m):
        """–í—ã–≥–æ–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞."""
        reply = await m.get_reply_message()
        if not reply:
            await m.edit("<b>‚ùå –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∏–∫–∞.</b>")
            return
        user = reply.sender
        if not user:
            await m.edit("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>")
            return
        try:
            await m.client.kick_participant(m.chat_id, user.id)
            await m.edit(self.strings["kick_success"].format(user.first_name))
        except Exception as e:
            await m.edit(f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {e}")

    @loader.command()
    async def meme(self, m):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º."""
        await m.edit(self.strings["meme_loading"])
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get("https://meme-api.com/gimme") as resp:
                    if resp.status != 200:
                        await m.edit(self.strings["meme_error"])
                        return
                    data = await resp.json()
                    meme_url = data.get("url")
                    meme_caption = data.get("title")
                    if not meme_url:
                        await m.edit(self.strings["meme_error"])
                        return
                    await m.client.send_file(m.chat_id, meme_url, caption=meme_caption)
                    await m.delete()
        except Exception as e:
            await m.edit(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞:</b> {e}")

    @loader.command()
    async def quote(self, m):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É."""
        await m.edit(self.strings["quote_loading"])
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get("https://api.quotable.io/random") as resp:
                    if resp.status != 200:
                        await m.edit(self.strings["quote_error"])
                        return
                    data = await resp.json()
                    content = data.get("content")
                    author = data.get("author")
                    if not content:
                        await m.edit(self.strings["quote_error"])
                        return
                    await m.edit(f"<b>üìù –¶–∏—Ç–∞—Ç–∞:</b>\n\n<code>{content}</code>\n\n<b>‚Äî {author}</b>")
        except Exception as e:
            await m.edit(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:</b> {e}")

    @loader.command()
    async def translate(self, m):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]"""
        args = utils.get_args_raw(m)
        if not args:
            await m.edit(self.strings["translate_usage"])
            return
        parts = args.split(' ', 1)
        if len(parts) < 2:
            await m.edit(self.strings["translate_usage"])
            return
        lang, text = parts
        await m.edit("<b>üîÑ –ü–µ—Ä–µ–≤–æ–∂—É...</b>")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://api.mymemory.translated.net/get?q={text}&langpair=auto|{lang}"
                ) as resp:
                    if resp.status != 200:
                        await m.edit(self.strings["translate_error"])
                        return
                    data = await resp.json()
                    translated_text = data.get("responseData", {}).get("translatedText")
                    if not translated_text:
                        await m.edit(self.strings["translate_error"])
                        return
                    await m.edit(f"<b>üìú –ü–µ—Ä–µ–≤–æ–¥ ({lang}):</b>\n<code>{translated_text}</code>")
        except Exception as e:
            await m.edit(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:</b> {e}")

    @loader.command()
    async def currency(self, m):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .currency [—Å—É–º–º–∞] [–∏–∑] [–≤]"""
        args = utils.get_args_raw(m)
        if not args:
            await m.edit(self.strings["currency_usage"])
            return
        parts = args.split()
        if len(parts) != 3:
            await m.edit(self.strings["currency_usage"])
            return
        amount, from_currency, to_currency = parts
        try:
            amount = float(amount)
        except ValueError:
            await m.edit("<b>‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.</b>")
            return
        await m.edit("<b>üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∞–ª—é—Ç—É...</b>")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"https://api.exchangerate-api.com/v4/latest/{from_currency.upper()}") as resp:
                    if resp.status != 200:
                        await m.edit(self.strings["currency_error"])
                        return
                    data = await resp.json()
                    rates = data.get("rates")
                    if not rates or to_currency.upper() not in rates:
                        await m.edit("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã.</b>")
                        return
                    rate = rates[to_currency.upper()]
                    converted = amount * rate
                    await m.edit(f"<b>üí± {amount} {from_currency.upper()} = {converted} {to_currency.upper()}</b>")
        except Exception as e:
            await m.edit(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã:</b> {e}")

    @loader.command()
    async def info(self, m):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ."""
        reply = await m.get_reply_message()
        if reply and reply.sender:
            user = reply.sender
            try:
                username = user.username or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                first = user.first_name or ""
                last = user.last_name or ""
                bio = user.about or "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                await m.edit(
                    self.strings["info_user"].format(
                        first=first,
                        last=last,
                        username=username,
                        id=user.id,
                        bio=bio
                    )
                )
            except Exception as e:
                await m.edit(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {e}")
        else:
            try:
                chat = await m.get_chat()
                participants = await m.client.get_participants(chat)
                members = len(participants)
                await m.edit(
                    self.strings["info_chat"].format(
                        title=chat.title,
                        type=type(chat).__name__,
                        id=chat.id,
                        members=members
                    )
                )
            except Exception as e:
                await m.edit(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:</b> {e}")

    @loader.command()
    async def sysinfo(self, m):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ."""
        uname = platform.uname()
        info = self.strings["sysinfo"].format(
            system=uname.system,
            node=uname.node,
            version=uname.version,
            machine=uname.machine,
            processor=uname.processor
        )
        await m.edit(info)

    @loader.command()
    async def download(self, m):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .download [—Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º]"""
        reply = await m.get_reply_message()
        if not reply or not reply.media:
            await m.edit("<b>‚ùå –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.</b>")
            return
        await m.edit("<b>üîÑ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...</b>")
        try:
            file_path = await reply.download_media()
            await m.client.send_file(m.chat_id, file_path, caption=self.strings["download_success"])
            os.remove(file_path)
            await m.delete()
        except Exception as e:
            await m.edit(f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª:</b> {e}")

    @loader.command()
    async def helpme(self, m):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è."""
        await m.edit(self.strings["help_text"])

    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤."""
        self.client = client
        self.db = db
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏